from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import folium

# --- Input Data (Markham, Ontario Example) ---
# Distance matrix (simulated in km) between garbage collection points
distance_matrix = [
    [0, 5, 7, 3, 8],
    [5, 0, 2, 6, 4],
    [7, 2, 0, 5, 3],
    [3, 6, 5, 0, 7],
    [8, 4, 3, 7, 0]
]

# Garbage collection points (latitude, longitude)
locations = {
    "Depot (Truck Yard)": (43.8561, -79.3370),  # Starting location
    "Point A": (43.8650, -79.3200),
    "Point B": (43.8700, -79.3500),
    "Point C": (43.8550, -79.3100),
    "Point D": (43.8600, -79.3300),
}

num_trucks = 2  # Number of available garbage trucks
truck_capacity = 100  # Example: Each truck can handle 100 units of waste
waste_at_locations = [0, 40, 30, 50, 60]  # Waste in bins at each location

fuel_price_per_liter = 1.52  # CAD $ per liter
fuel_consumption_per_km = 0.3  # Liters per km per truck

# --- OR-Tools Vehicle Routing Problem (VRP) Solver ---
def create_data_model():
    """Stores the data for the problem."""
    data = {
        "distance_matrix": distance_matrix,
        "num_vehicles": num_trucks,
        "depot": 0,  # Start at the depot (truck yard)
        "demands": waste_at_locations,
        "vehicle_capacities": [truck_capacity] * num_trucks,
    }
    return data

def main():
    data = create_data_model()
    
    # Create Routing Index Manager
    manager = pywrapcp.RoutingIndexManager(len(data["distance_matrix"]), data["num_vehicles"], data["depot"])
    routing = pywrapcp.RoutingModel(manager)

    # Define Cost Function (Distance Minimization)
    def distance_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data["distance_matrix"][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Add Capacity Constraint (Truck Limits)
    def demand_callback(from_index):
        from_node = manager.IndexToNode(from_index)
        return data["demands"][from_node]

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
    routing.AddDimensionWithVehicleCapacity(demand_callback_index, 0, data["vehicle_capacities"], True, "Capacity")

    # Set Search Parameters (Optimize Route)
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC

    # Solve the Problem
    solution = routing.SolveWithParameters(search_parameters)

    # Display Results
    if solution:
        total_distance = 0
        total_fuel_saved = 0
        map_center = locations["Depot (Truck Yard)"]
        route_map = folium.Map(location=map_center, zoom_start=12)

        for vehicle_id in range(data["num_vehicles"]):
            index = routing.Start(vehicle_id)
            route_distance = 0
            route_points = [list(locations.values())[0]]  # Start from depot

            while not routing.IsEnd(index):
                previous_index = index
                index = solution.Value(routing.NextVar(index))
                from_node = manager.IndexToNode(previous_index)
                to_node = manager.IndexToNode(index)
                
                route_distance += data["distance_matrix"][from_node][to_node]
                route_points.append(list(locations.values())[to_node])

            total_distance += route_distance
            fuel_used = route_distance * fuel_consumption_per_km
            fuel_cost = fuel_used * fuel_price_per_liter
            total_fuel_saved += fuel_used

            # Draw route on map
            folium.PolyLine(route_points, color="blue", weight=5, opacity=0.7).add_to(route_map)

            print(f"Truck {vehicle_id + 1}:")
            print(f"- Distance traveled: {route_distance} km")
            print(f"- Fuel used: {fuel_used:.2f} L")
            print(f"- Fuel cost: CAD${fuel_cost:.2f}")
            print("---------------------------")

        print(f"Total Distance Traveled: {total_distance} km")
        print(f"Total Fuel Used: {total_fuel_saved:.2f} L")
        print(f"Total Fuel Cost: CAD${total_fuel_saved * fuel_price_per_liter:.2f}")

        # Save and display map
        route_map.save("optimized_route.html")
        print("üìç Optimized route saved as 'optimized_route.html'. Open in a browser to view the map.")

    else:
        print("‚ùå No solution found!")

if __name__ == "__main__":
    main()

